#!/usr/bin/env ruby
# frozen_string_literal: true

require 'uri'
require 'net/http'
require 'json'
require 'yaml'

class SerialJSONWriter
  def initialize(filename, mode = 'w')
    @filename = filename

    @fh = File.open(@filename, mode)
  end

  def <<(data)
    @fh.puts '---'
    @fh.puts JSON.pretty_generate(data)
  end
end

def version(uri)
  json = Net::HTTP.get(uri)
  JSON.parse(json)
end

def models(uri)
  json = Net::HTTP.get(uri)
  JSON.parse(json)['models'].map { |m| m['model'] }
end

def one_query(uri, model, prompt)
  json = ''

  Net::HTTP.start(uri.host, uri.port) do |http|
    req = Net::HTTP::Post.new(uri.request_uri)
    req.body = '{"model": "' + model + '", "prompt": "' + prompt + '", "stream": false}'
    req.content_type = 'application/json'

    json = http.request(req).body
  end

  data = JSON.parse(json)
  data.delete('created_at')
  data.delete('response')
  data.delete('done')

  data['prompt'] = prompt
  data['context'] = data['context'].size

  data
end

def opts
  h = {}
  a = []

  while ARGV.any?
    o = ARGV.shift

    if o.start_with?('--')
      h[o[2..-1].downcase] = ARGV.shift
    else
      o << a
    end
  end

  [h, a]
end

o, a = opts

unless o['config']
  puts "Use --config to pass the config file"
  exit 1
end

unless File.exist?(o['config'])
  puts "The config file [#{o['config']}] does not exist"
  exit 1
end

unless o['report']
  puts "Use --report to say where the results are to be written to"
  exit 1
end

config = YAML.load_file(o['config'])

v_uri = URI.parse("#{config['server']}/api/version")
v = version(v_uri)

m_uri = URI.parse("#{config['server']}/api/tags")
m = models(m_uri)

g_uri = URI.parse("#{config['server']}/api/generate")

data = []

config['models'].each do |model|
  if m.include?(model)
    puts "#{model}"

    config['prompts'].each do |prompt|
      puts "    #{prompt}"

      begin
        x = one_query(g_uri, model, prompt)
        x.merge!(v)

        data << x
      rescue => e
        puts "ERROR: #{e}"
      end
    end
  else
    puts "    Unknown model #{model}"
  end
end

sj = SerialJSONWriter.new(o['report'])
data.each do |x|
  sj << x
end
