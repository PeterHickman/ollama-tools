#!/usr/bin/env ruby
# frozen_string_literal: true

require 'json'
require 'set'

def find_models
  # Program arguments
  path = ARGV[0]
  if path
    e_path = File.expand_path(path)
    return e_path if File.directory?(e_path)
  end

  # OLLAMA_MODELS
  path = ENV['OLLAMA_MODELS']
  if path
    e_path = File.expand_path(path)
    return e_path if File.directory?(e_path)
  end

  # According to the OS
  path = case RbConfig::CONFIG['host_os']
         when /linux/
           '/usr/share/ollama/.ollama/models'
         when /darwin/
           '~/.ollama/models'
         when /mswin|mingw32|windows/
           'C:\Users\%username%\.ollama\models'
         else
           raise "Dont know where the models are stored on #{RbConfig::CONFIG['host_os']}"
         end

  if path
    e_path = File.expand_path(path)
    return e_path if File.directory?(e_path)
  end

  raise "Model path [#{e_path}] is not available"
end

ROOT = find_models

blob_list = Set.new

Dir["#{ROOT}/blobs/sha256-*"].each do |filename|
  name = File.basename(filename).gsub('sha256-', '')
  blob_list << name
end

puts "There are #{blob_list.size} blobs"
puts

manifests = 0
manifest_blobs = Set.new

Dir["#{ROOT}/manifests/**/*"].each do |filename|
  next if File.directory?(filename)

  manifests += 1

  json = File.read(filename)
  data = JSON.parse(json)

  manifest_blobs << data['config']['digest'].split(':', 2).last

  data['layers'].each do |layer|
    manifest_blobs << layer['digest'].split(':', 2).last
  end
end

puts "#{manifests} manifests had #{manifest_blobs.size} unique blobs"
puts

to_remove = []

manifest_blobs.each do |blob|
  next unless blob_list.include?(blob)

  to_remove << blob
end

to_remove.each do |blob|
  blob_list.delete(blob)
  manifest_blobs.delete(blob)
end

puts 'Unreferenced manifest blobs'
if manifest_blobs.any?
  manifest_blobs.each do |blob|
    puts "  #{blob}"
  end
else
  puts '  None'
end
puts

puts 'Unreferenced blobs'
if blob_list.any?
  blob_list.each do |blob|
    puts "  #{blob}"
  end
else
  puts '  None'
end
puts
