#!/usr/bin/env ruby

require 'colorize'
require 'zip'

BLOCK = 1024 * 1024 * 128

def find_models
  # OLLAMA_MODELS
  path = ENV['OLLAMA_MODELS']
  if path
    e_path = File.expand_path(path)
    return e_path if File.directory?(e_path)
  end

  # According to the OS
  path = case RbConfig::CONFIG['host_os']
         when /linux/
           '/usr/share/ollama/.ollama/models'
         when /darwin/
           '~/.ollama/models'
         when /mswin|mingw32|windows/
           'C:\Users\%username%\.ollama\models'
         else
           raise "Dont know where the models are stored on #{RbConfig::CONFIG['host_os']}"
         end

  if path
    e_path = File.expand_path(path)
    return e_path if File.directory?(e_path)
  end

  raise "Model path [#{e_path}] is not available"
end

home = find_models

blobs = "#{home}/blobs"
unless File.exists?(blobs)
  puts "#{blobs} is missing".red
  exit 1
end

manifests = "#{home}/manifests"
unless File.exists?(manifests)
  puts "#{manifests} is missing".red
  exit 1
end

zipfile_name = ARGV.shift
if zipfile_name.nil?
  puts "No zipfile given".red
  exit 1
end

unless File.exists?(zipfile_name)
  puts "Cannot find [#{zipfile_name}]".red
  exit 1
end

puts "==> Unpacking #{zipfile_name}".bold

Zip::File.open(zipfile_name, create: false) do |zipfile|
  zipfile.each do |entry|
    puts "    extract #{entry.name.blue}"

    if entry.name.start_with?('sha256:')
      file = "#{blobs}/#{entry.name}"
      f = File.new(file, 'wb')
      s = entry.get_input_stream
      loop do
        b = s.read(BLOCK)
        break if b.nil?
        f.write(b)
      end
      f.close
    else
      path = "#{manifests}/#{File.dirname(entry.name)}"
      FileUtils.mkdir_p(path)
      file = "#{manifests}/#{entry.name}"
      f = File.new(file, 'wb')
      f.write(entry.get_input_stream.read)
      f.close
    end
  end
end
